1. 선형 정렬 구현 원리
	1-1. 선택 정렬
		모든 데이터를 일일이 비교하여 가장 작은 데이터부터 정렬한다.
		0번째 데이터에 대해 1번째부터 모든 데이터를 탐색하여 가장 작은 데이터를 0번째 데이터와 교환하고,
		i번째 데이터에 대해 i+1번째부터 모든 데이터를 탐색하여 가장 작은 데이터를 i번째 데이터와 교환하여,
		결과적으로 모든 데이터가 정렬된다.
	1-2. 삽입 정렬
		각 데이터를 이전 데이터들과 비교하여 적절한 위치에 삽입하여 정렬한다.
		1번째 데이터가 0번째 데이터보다 작다면 1번째 데이터와 0번째 데이터를 교환하고,
		i번째 데이터를 i-1번째 데이터부터 0번째 데이터까지 비교하며, i-j번째 데이터가 i번째 데이터보다 크거나 같다면 i-j번째 데이터를 뒤로 옮기다가, i-j번째 데이터가 i번째 데이터보다 작아지면 그 자리에 i번째 데이터를 삽입한다.
		각 데이터는 이전 데이터들을 한칸씩 뒤로 밀고 자신이 처음으로 앞선 데이터보다 작아지는 자리에 삽입되어 마지막 데이터의 삽입 이후 모든 데이터를 정렬한다.
	1-3. 버블 정렬
		반복적으로 서로 인접한 데이터를 비교하여 정렬한다.
		0번재 데이터와 1번째 데이터를 비교하여 정렬하고,
		i번째 데이터와 i+1번째 데이터를 비교하여 정렬하고,
		n-1번재 데이터를 n번째 데이터와 비교하여 정렬하면 n번째 데이터에 가장 큰 데이터가 정렬된다.
		이를 j번 반복하면 n-j번째 데이터까지 정렬되고,
		이를 n번 반복하면 0번째 데이터까지 정렬되어 모든 데이터가 정렬된다.
2. 분할정복 정렬
	2-1. 구현 원리
		2-1-1. 힙 정렬
			우선순위 큐를 이용하여 정렬한다.
			우선순위 큐(힙)은 입력되는 데이터가 작은 순서대로 정렬되므로, 그 원리를 이용하여 정렬한다.
		2-1-2. 병합 정렬
			데이터를 2분할하여 두 데이터를 정렬한 후 병합하는 방식으로 정렬한다.
			각 데이터 집합의 크기가 1이 될 때까지 분할한 후, 크기가 1인 데이터 집합 둘을 비교하고 크기가 2인 데이터 집합으로 병합한다.
			이후 크기가 2가 된 정렬된 데이터 집합 둘을 정렬하고 병합한다.
			이를 반복하여 정렬된 작은 크기의 데이터 집합을 빠르게 병합하는 방식으로 데이터를 정렬한다.
		2-1-3. 퀵 정렬
			피봇을 이용하여 데이터를 정렬한다.
			피봇을 하나 설정하여 피봇보다 작은 값을 피봇 좌측에, 큰 값은 우측에 배치한다.
			이렇게 나뉜 두 집합에 대해 다시 각각의 피봇을 설정하여 데이터 집합을 나누어준다.
			이를 반복하여 만들어진 더이상 피봇을 설정할 수 없는 크기의 데이터 집합은 정렬된 상태가 되고, 결과적으로 전체 데이터 집합 또한 정렬된다.
	2-2. 특징
		2-2-1. 힙 정렬
			n·ln·n의 시간 복잡도를 갖는다.
			우선순위 큐를 이용하여 데이터를 입력하는 대로 데이터를 정렬하기 떄문에 우선순위 큐와 같은 시간 복잡도를 갖는다.
		2-2-2. 병합 정렬
			n·ln·n의 시간 복잡도를 갖는다.
			데이터 집합을 2분할하여 두 개의 데이터 집합을 생성해야 하기 때문에 실질적으로 데이터 집합 크기의 제곱의 메모리 공간을 사용한다.
		2-2-3. 퀵 정렬
			일반적으로 n·ln·n의 시간 복잡도를 가지나 최악의 경우 n^2의 시간 복잡도를 갖는다.
			데이터 집합을 그대로 두고 피봇을 이용하여 정렬하기 때문에 별도의 메모리 공간을 사용하지 않는다.