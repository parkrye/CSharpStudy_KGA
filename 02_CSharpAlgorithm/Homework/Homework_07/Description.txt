1. 해시
	1-1. 해시의 원리
		키와 값을 갖는 데이터에 대해, 키 값을 고정된 크기의 암호화된 데이터로 해싱하여 특정 주소를 가리키도록 한다.
		이때 동일한 키에 대한 해시함수의 결과는 반드시 항상 동일한 값이어야 한다.
	1-2. 해시함수의 효율
		해시테이블은 주어진 키를 해싱하여 바로 데이터를 탐색, 삽입, 삭제할 수 있기 때문에 매우 높은 시간 효율성을 갖는다.
		다만 데이터가 저장되지 않은 불필요한 메모리 공간만큼 낭비가 발생할 수 있다.
2. 해시테이블의 충돌
	2-1. 해시테이블의 충돌
		서로 다른 키를 해싱한 결과가 같은 값이 되어 발생하는 문제.
		충분히 거대한 메모리 공간을 사용하더라도 입력되는 키마다 고유한 해시 값을 만드는 것은 불가능하다.
		따라서 이를 해결하기 위한 몇가지 방안이 고려되었다.
	2-2. 충돌해결방안
		2-2-1. 체이닝
			해시 값이 가리키는 데이터를 연결리스트로 만드는 방법.
			우선 키를 해싱한 값을 토대로 해시 값의 주소를 찾고, 만약 동일한 해시 값의 데이터가 둘 이상이라면 각 노드의 키를 대조하여 원하는 데이터를 찾을 수 있다.
			입력하는 데이터가 아무리 많아지더라도 성능을 저해하지 않으나, 해시테이블 외에 추가적인 메모리 공간을 사용하게 된다.
		2-2-2. 개방주소법
			해시 값이 가리키는 주소에 이미 다른 데이터가 존재할 경우 다음 비어있는 주소에 데이터를 저장하는 방법.
			이 경우 선형탐색, 제곱탐색, 이중해싱 등을 이용하여 다음 해시 값의 주소를 선택할 수 있도록 한다.
			체이닝과 달리 추가적인 저장 공간을 필요로 하지 않는 등의 장점이 있으나, 입력하는 데이터가 많아질수록 비어있는 주소를 찾기 위해 성능이 저해되어 재해싱 과정이 필요해진다.
			2-2-2-1. 이중 해싱
				해싱 값을 다시 해싱하여 새로운 해싱 값을 얻는 작업.
			2-2-2-2. 재해싱
				해시테이블의 크기를 키우는 작업.
				크기가 큰 해시테이블을 새로 생성하고 기존의 데이터를 다시 해싱하여 저장한다.